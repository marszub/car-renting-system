//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `auth.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Auth;

public class AccessData implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public String token;

    public Role role;

    public AccessData()
    {
        this.token = "";
        this.role = Role.User;
    }

    public AccessData(String token, Role role)
    {
        this.token = token;
        this.role = role;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        AccessData r = null;
        if(rhs instanceof AccessData)
        {
            r = (AccessData)rhs;
        }

        if(r != null)
        {
            if(this.token != r.token)
            {
                if(this.token == null || r.token == null || !this.token.equals(r.token))
                {
                    return false;
                }
            }
            if(this.role != r.role)
            {
                if(this.role == null || r.role == null || !this.role.equals(r.role))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Auth::AccessData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, token);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, role);
        return h_;
    }

    public AccessData clone()
    {
        AccessData c = null;
        try
        {
            c = (AccessData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.token);
        Role.ice_write(ostr, this.role);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.token = istr.readString();
        this.role = Role.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, AccessData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public AccessData ice_read(com.zeroc.Ice.InputStream istr)
    {
        AccessData v = new AccessData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<AccessData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, AccessData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<AccessData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(AccessData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final AccessData _nullMarshalValue = new AccessData();

    /** @hidden */
    public static final long serialVersionUID = -1277528616L;
}
